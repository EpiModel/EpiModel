% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/net.mod.updater.R
\name{updater.net}
\alias{updater.net}
\title{Module to modify the parameters during the simulation}
\usage{
updater.net(dat, at)
}
\arguments{
\item{dat}{Master list object containing a \code{networkDynamic} object and
other initialization information passed from \code{\link{netsim}}.}

\item{at}{Current time step.}
}
\value{
the updated dat Master list object.
}
\description{
Module to modify the parameters during the simulation
}
\details{
if a list code{param.updater.list} is present in the parameters, this module will
update the code{param} list with new values at given timesteps.
An updater is a list containing an code{at} element governing when the
changes will happen, an optional code{verbose} boolean controlling whether to
output a message when a change is made (default = TRUE) and a code{param}
named list with the names being the same as the paramter names and the new
value to update with.
If the new value is a function but the old one is not, the
function will be applied to the current element (see example) .
}
\examples{
\dontrun{

# Create the parame.updater.list
param.updater.list <- list(
  # this is one updater
  list(
    at = 10,
    param = list(
      hiv.test.rate = rep(0.0128, 3),
      trans.scale = c(1.61, 0.836, 0.622)
    )
  ),
  # this is another updater
  list(
    at = 12,
    verbose = TRUE,
    param = list(
      hiv.test.rate = function(x) x * 3,
      trans.scale = function(x) x^2 / 3
    )
  )
)

 # Do not forget to add it to `param`
 param <- param.net(
   inf.prob = 0.3,
   act.rate = 0.5,
   hiv.test.rate = rep(0.256, 3),
   trans.scale = c(1, 2, 3),
   param.updater.list = param.updater.list
 )

# Enable the module in `control`
 control <- control.net(
   type = NULL, # must be NULL as we use a custom module
   nsims = 1,
   nsteps = 20,
   verbose = FALSE,
   updater.FUN = updater.net
 )

nw <- network_initialize(n = 50)
nw <- set_vertex_attribute(nw, "race", rbinom(50, 1, 0.5))
est <- netest(
  nw,
  formation = ~edges,
  target.stats = 25,
  coef.diss = dissolution_coefs(~offset(edges), 10, 0),
  verbose = FALSE
)

init <- init.net(i.num = 10)
mod <- netsim(est, param, init, control)

}

}
